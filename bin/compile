#!/bin/bash

set -eo pipefail

indent() {
  sed -u 's/^/       /'
}

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
buildpack=$(cd "$(dirname $0)/.." && pwd)


# Accept user-defined environment
if test -f ${build}/.buildpack.env; then
    source ${build}/.buildpack.env
fi

ELM_VERSION="0.19"
CACHE_BUILD_OBJECTS=${CACHE_BUILD_OBJECTS:-true}

error() {
    msg=$1
    echo "    !! ${msg}"
    exit 1
}

mkcd()
{
    mkdir -p $1 && cd $1
}

echo "export PATH=${cache}/bin/elm-${ELM_VERSION}:$PATH" >> $buildpack/export
PATH=${cache}/bin/elm-${ELM_VERSION}:$PATH

mkcd ${cache}/bin/elm-${ELM_VERSION}
echo "-----> Retrieving ${ELM_VERSION}"
wget -nv -c "https://github.com/elm/compiler/releases/download/0.19.0/binaries-for-linux.tar.gz"
echo "-----> Extracting ${ELM_VERSION}"
tar -zxvf binaries-for-linux.tar.gz
echo "-----> MV"
mv elm ${cache}/bin

echo "-----> Chmod"
chmod a+x ${cache}/bin/elm

echo "-----> CD"
cd ${build}

get_app_json_env() {
    name=$1
    if ! test -f ${build}/app.json; then
        error "app.json missing."
    fi
    python -c "from __future__ import print_function; import json; j=json.load(open('app.json')); print(j['env']['${name}'])"
}

ELM_COMPILE="elm make Todo.elm --output elm.js"
#ELM_COMPILE=$(get_app_json_env "ELM_COMPILE")
echo "-----> Compiling with ${ELM_COMPILE}"
${ELM_COMPILE} | indent


